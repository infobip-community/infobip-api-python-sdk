# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr
from models.channel import Channel
from models.resource_type import ResourceType


class ResourceAssociationResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    resource_type: ResourceType = Field(..., alias="resourceType")
    channel: Channel = ...
    application_id: constr(strict=True, max_length=255) = Field(
        ...,
        alias="applicationId",
        description="Id of the application, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail.",
    )
    entity_id: Optional[constr(strict=True, max_length=255)] = Field(
        None,
        alias="entityId",
        description="Id of the entity, this `id` will be a URL path parameter, the validation on our backend will verify its validity by doing `urlEncode(id) = id` meaning if any character in the `id` would require encoding the validation will fail.",
    )
    resource_id: constr(strict=True, max_length=255) = Field(
        ...,
        alias="resourceId",
        description="ID of the resource. Depends on `resourceType` and `channel`.<br/>Use [numberKey](https://www.infobip.com/docs/api/platform-connectivity/numbers/phone-numbers/list-purchased-numbers) for the NUMBER `resourceType` available for: 10DLC, Short Code, VLN for the following channels: SMS, MMS.<br/>Use [domainName](https://www.infobip.com/docs/api/channels/email/get-all-domains) for the DOMAIN `resourceType` available for domain for the following channel: Email.",
    )
    __properties = [
        "resourceType",
        "channel",
        "applicationId",
        "entityId",
        "resourceId",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResourceAssociationResponse:
        """Create an instance of ResourceAssociationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResourceAssociationResponse:
        """Create an instance of ResourceAssociationResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ResourceAssociationResponse.parse_obj(obj)

        _obj = ResourceAssociationResponse.parse_obj(
            {
                "resource_type": obj.get("resourceType"),
                "channel": obj.get("channel"),
                "application_id": obj.get("applicationId"),
                "entity_id": obj.get("entityId"),
                "resource_id": obj.get("resourceId"),
            }
        )
        return _obj
