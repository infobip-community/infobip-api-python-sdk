# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from models.mms_price import MmsPrice


class MmsInboundReport(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    message_id: Optional[StrictStr] = Field(
        None,
        alias="messageId",
        description="The ID that uniquely identifies the received message.",
    )
    to: Optional[StrictStr] = Field(
        None, description="The message destination address."
    )
    var_from: Optional[StrictStr] = Field(
        None, alias="from", description="Sender ID that can be alphanumeric or numeric."
    )
    message: Optional[StrictStr] = Field(
        None, description="Full text of the received message."
    )
    received_at: Optional[datetime] = Field(
        None,
        alias="receivedAt",
        description="Tells when Infobip platform received the message. It has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
    )
    mms_count: Optional[StrictInt] = Field(
        None, alias="mmsCount", description="The number of sent message segments."
    )
    callback_data: Optional[StrictStr] = Field(
        None,
        alias="callbackData",
        description="Custom callback data can be inserted during the setup phase.",
    )
    price: Optional[MmsPrice] = None
    __properties = [
        "messageId",
        "to",
        "from",
        "message",
        "receivedAt",
        "mmsCount",
        "callbackData",
        "price",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MmsInboundReport:
        """Create an instance of MmsInboundReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict["price"] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MmsInboundReport:
        """Create an instance of MmsInboundReport from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MmsInboundReport.parse_obj(obj)

        _obj = MmsInboundReport.parse_obj(
            {
                "message_id": obj.get("messageId"),
                "to": obj.get("to"),
                "var_from": obj.get("from"),
                "message": obj.get("message"),
                "received_at": obj.get("receivedAt"),
                "mms_count": obj.get("mmsCount"),
                "callback_data": obj.get("callbackData"),
                "price": MmsPrice.from_dict(obj.get("price"))
                if obj.get("price") is not None
                else None,
            }
        )
        return _obj
