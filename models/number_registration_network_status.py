# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator


class NumberRegistrationNetworkStatus(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    network: Optional[StrictStr] = Field(
        None, description="The network with which the campaign has been registered."
    )
    state: Optional[StrictStr] = Field(
        None, description="The state of the campaign's registration with this network."
    )
    message_class: Optional[StrictStr] = Field(
        None,
        alias="messageClass",
        description="This value is provided by some carriers to help determine throughput and daily limits. Refer to the [current documentation](https://www.infobip.com/docs/10dlc/how-vetting-works) for how to interpret these values as they may change over time.",
    )
    __properties = ["network", "state", "messageClass"]

    @validator("network")
    def network_validate_enum(cls, v):
        if v is None:
            return v

        if v not in (
            "ATT",
            "T_MOBILE",
            "VERIZON",
            "US_CELLULAR",
            "INTEROP",
            "CLEARSKY",
            "GOOGLE_VOICE",
        ):
            raise ValueError(
                "must validate the enum values ('ATT', 'T_MOBILE', 'VERIZON', 'US_CELLULAR', 'INTEROP', 'CLEARSKY', 'GOOGLE_VOICE')"
            )
        return v

    @validator("state")
    def state_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ("ACTIVE", "PENDING", "NOT_REGISTERED", "CERTIFICATION"):
            raise ValueError(
                "must validate the enum values ('ACTIVE', 'PENDING', 'NOT_REGISTERED', 'CERTIFICATION')"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NumberRegistrationNetworkStatus:
        """Create an instance of NumberRegistrationNetworkStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NumberRegistrationNetworkStatus:
        """Create an instance of NumberRegistrationNetworkStatus from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NumberRegistrationNetworkStatus.parse_obj(obj)

        _obj = NumberRegistrationNetworkStatus.parse_obj(
            {
                "network": obj.get("network"),
                "state": obj.get("state"),
                "message_class": obj.get("messageClass"),
            }
        )
        return _obj
