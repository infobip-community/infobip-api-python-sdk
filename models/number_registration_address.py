# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr


class NumberRegistrationAddress(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    city: constr(strict=True, max_length=50, min_length=1) = Field(
        ..., description="The city in which the brand is located."
    )
    state: Optional[constr(strict=True, max_length=50, min_length=1)] = Field(
        None,
        description="State or province. For the United States, please use 2 character codes. E.g. 'CA' for California.",
    )
    street: constr(strict=True, max_length=100, min_length=1) = Field(
        ..., description="The street address for the brand."
    )
    zip_code: constr(strict=True, max_length=10, min_length=1) = Field(
        ..., alias="zipCode", description="The zipcode in which the brand is located."
    )
    __properties = ["city", "state", "street", "zipCode"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NumberRegistrationAddress:
        """Create an instance of NumberRegistrationAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NumberRegistrationAddress:
        """Create an instance of NumberRegistrationAddress from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NumberRegistrationAddress.parse_obj(obj)

        _obj = NumberRegistrationAddress.parse_obj(
            {
                "city": obj.get("city"),
                "state": obj.get("state"),
                "street": obj.get("street"),
                "zip_code": obj.get("zipCode"),
            }
        )
        return _obj
