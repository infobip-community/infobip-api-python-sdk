# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from models.sms_price import SmsPrice


class SmsInboundMessage(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    callback_data: Optional[StrictStr] = Field(
        None,
        alias="callbackData",
        description="Custom callback data sent over the notifyUrl.",
    )
    clean_text: Optional[StrictStr] = Field(
        None,
        alias="cleanText",
        description="Content of the message without a keyword (if a keyword was sent).",
    )
    var_from: Optional[StrictStr] = Field(
        None, alias="from", description="Sender ID that can be alphanumeric or numeric."
    )
    keyword: Optional[StrictStr] = Field(
        None, description="Keyword extracted from the message content."
    )
    message_id: Optional[StrictStr] = Field(
        None, alias="messageId", description="Unique message ID."
    )
    price: Optional[SmsPrice] = None
    received_at: Optional[datetime] = Field(
        None,
        alias="receivedAt",
        description="Indicates when the Infobip platform received the message. Has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
    )
    sms_count: Optional[StrictInt] = Field(
        None, alias="smsCount", description="The number of characters within a message"
    )
    text: Optional[StrictStr] = Field(None, description="Full content of the message.")
    to: Optional[StrictStr] = Field(
        None, description="The destination address of the message."
    )
    __properties = [
        "callbackData",
        "cleanText",
        "from",
        "keyword",
        "messageId",
        "price",
        "receivedAt",
        "smsCount",
        "text",
        "to",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmsInboundMessage:
        """Create an instance of SmsInboundMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict["price"] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmsInboundMessage:
        """Create an instance of SmsInboundMessage from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SmsInboundMessage.parse_obj(obj)

        _obj = SmsInboundMessage.parse_obj(
            {
                "callback_data": obj.get("callbackData"),
                "clean_text": obj.get("cleanText"),
                "var_from": obj.get("from"),
                "keyword": obj.get("keyword"),
                "message_id": obj.get("messageId"),
                "price": SmsPrice.from_dict(obj.get("price"))
                if obj.get("price") is not None
                else None,
                "received_at": obj.get("receivedAt"),
                "sms_count": obj.get("smsCount"),
                "text": obj.get("text"),
                "to": obj.get("to"),
            }
        )
        return _obj
