# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator


class NumberRegistrationBrandVet(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    vet_id: Optional[StrictStr] = Field(
        None, alias="vetId", description="The ID of the vet record."
    )
    brand_id: Optional[StrictStr] = Field(
        None, alias="brandId", description="The ID of the brand the vet belongs to."
    )
    score: Optional[StrictInt] = Field(
        None, description="The score the brand received after being vetted."
    )
    vetted_date: Optional[datetime] = Field(
        None, alias="vettedDate", description="The date the vet was completed."
    )
    enhanced_vetted_date: Optional[datetime] = Field(
        None,
        alias="enhancedVettedDate",
        description="The date the vet was completed if it was an enhanced vet or if it was converted to enhanced from a standard vet.",
    )
    type: StrictStr = Field(..., description="The type of vet.")
    __properties = [
        "vetId",
        "brandId",
        "score",
        "vettedDate",
        "enhancedVettedDate",
        "type",
    ]

    @validator("type")
    def type_validate_enum(cls, v):
        if v not in ("STANDARD", "ENHANCED"):
            raise ValueError("must validate the enum values ('STANDARD', 'ENHANCED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NumberRegistrationBrandVet:
        """Create an instance of NumberRegistrationBrandVet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NumberRegistrationBrandVet:
        """Create an instance of NumberRegistrationBrandVet from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NumberRegistrationBrandVet.parse_obj(obj)

        _obj = NumberRegistrationBrandVet.parse_obj(
            {
                "vet_id": obj.get("vetId"),
                "brand_id": obj.get("brandId"),
                "score": obj.get("score"),
                "vetted_date": obj.get("vettedDate"),
                "enhanced_vetted_date": obj.get("enhancedVettedDate"),
                "type": obj.get("type"),
            }
        )
        return _obj
