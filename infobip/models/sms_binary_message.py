# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr
from infobip.models.sms_binary_content import SmsBinaryContent
from infobip.models.sms_delivery_time_window import SmsDeliveryTimeWindow
from infobip.models.sms_destination import Destination
from infobip.models.sms_regional_options import SmsRegionalOptions


class SmsBinaryMessage(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    binary: Optional[SmsBinaryContent] = None
    callback_data: Optional[constr(strict=True, max_length=4000, min_length=0)] = Field(
        None,
        alias="callbackData",
        description="Additional client data that will be sent on the notifyUrl. The maximum value is 4000 characters.",
    )
    delivery_time_window: Optional[SmsDeliveryTimeWindow] = Field(
        None, alias="deliveryTimeWindow"
    )
    destinations: List[Destination] = Field(
        ...,
        description="An array of destination objects for where messages are being sent. A valid destination is required.",
    )
    flash: Optional[StrictBool] = Field(
        None,
        description="Allows for sending a [flash SMS](https://www.infobip.com/docs/sms/message-types#flash-sms) to automatically appear on recipient devices without interaction. Set to `true` to enable flash SMS, or leave the default value, `false` to send a standard SMS.",
    )
    var_from: Optional[StrictStr] = Field(
        None,
        alias="from",
        description="The sender ID which can be alphanumeric or numeric (e.g., `CompanyName`). Make sure you don't exceed [character limit](https://www.infobip.com/docs/sms/get-started#sender-names).",
    )
    intermediate_report: Optional[StrictBool] = Field(
        None,
        alias="intermediateReport",
        description="The [real-time intermediate delivery report](https://www.infobip.com/docs/api#channels/sms/receive-outbound-sms-message-report) containing GSM error codes, messages status, pricing, network and country codes, etc., which will be sent on your callback server. Defaults to `false`.",
    )
    notify_content_type: Optional[StrictStr] = Field(
        None,
        alias="notifyContentType",
        description="Preferred delivery report content type, `application/json` or `application/xml`.",
    )
    notify_url: Optional[StrictStr] = Field(
        None,
        alias="notifyUrl",
        description="The URL on your call back server on which the Delivery report will be sent.",
    )
    regional: Optional[SmsRegionalOptions] = None
    send_at: Optional[datetime] = Field(
        None,
        alias="sendAt",
        description="Date and time when the message is to be sent. Used for [scheduled SMS](https://www.infobip.com/docs/api#channels/sms/get-scheduled-sms-messages). Has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, and can only be scheduled for no later than 180 days in advance.",
    )
    validity_period: Optional[StrictInt] = Field(
        None,
        alias="validityPeriod",
        description="The message validity period in minutes. When the period expires, it will not be allowed for the message to be sent. Validity period longer than 48h is not supported (in this case, it will be automatically set to 48h).",
    )
    entity_id: Optional[constr(strict=True, max_length=66, min_length=0)] = Field(
        None,
        alias="entityId",
        description="Required for entity use in a send request for outbound traffic. Returned in notification events. For more details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).",
    )
    application_id: Optional[constr(strict=True, max_length=66, min_length=0)] = Field(
        None,
        alias="applicationId",
        description="Required for application use in a send request for outbound traffic. Returned in notification events. For more details, see our [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).",
    )
    __properties = [
        "binary",
        "callbackData",
        "deliveryTimeWindow",
        "destinations",
        "flash",
        "from",
        "intermediateReport",
        "notifyContentType",
        "notifyUrl",
        "regional",
        "sendAt",
        "validityPeriod",
        "entityId",
        "applicationId",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmsBinaryMessage:
        """Create an instance of SmsBinaryMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of binary
        if self.binary:
            _dict["binary"] = self.binary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_time_window
        if self.delivery_time_window:
            _dict["deliveryTimeWindow"] = self.delivery_time_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item in self.destinations:
                if _item:
                    _items.append(_item.to_dict())
            _dict["destinations"] = _items
        # override the default output from pydantic by calling `to_dict()` of regional
        if self.regional:
            _dict["regional"] = self.regional.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmsBinaryMessage:
        """Create an instance of SmsBinaryMessage from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SmsBinaryMessage.parse_obj(obj)

        _obj = SmsBinaryMessage.parse_obj(
            {
                "binary": SmsBinaryContent.from_dict(obj.get("binary"))
                if obj.get("binary") is not None
                else None,
                "callback_data": obj.get("callbackData"),
                "delivery_time_window": SmsDeliveryTimeWindow.from_dict(
                    obj.get("deliveryTimeWindow")
                )
                if obj.get("deliveryTimeWindow") is not None
                else None,
                "destinations": [
                    Destination.from_dict(_item) for _item in obj.get("destinations")
                ]
                if obj.get("destinations") is not None
                else None,
                "flash": obj.get("flash"),
                "var_from": obj.get("from"),
                "intermediate_report": obj.get("intermediateReport"),
                "notify_content_type": obj.get("notifyContentType"),
                "notify_url": obj.get("notifyUrl"),
                "regional": SmsRegionalOptions.from_dict(obj.get("regional"))
                if obj.get("regional") is not None
                else None,
                "send_at": obj.get("sendAt"),
                "validity_period": obj.get("validityPeriod"),
                "entity_id": obj.get("entityId"),
                "application_id": obj.get("applicationId"),
            }
        )
        return _obj
