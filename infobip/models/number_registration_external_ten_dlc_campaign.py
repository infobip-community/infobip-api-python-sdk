# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List, Optional

from pydantic import Field, StrictStr, conlist

from infobip.models.number_registration_campaign import NumberRegistrationCampaign
from infobip.models.number_registration_number_preview import (
    NumberRegistrationNumberPreview,
)


class NumberRegistrationExternalTenDlcCampaign(NumberRegistrationCampaign):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    external_campaign_id: StrictStr = Field(
        ...,
        alias="externalCampaignId",
        description="The ID of the campaign as defined by the external registrar (e.g. The Campaign Registry).",
    )
    number_keys: conlist(StrictStr, max_items=50, min_items=1) = Field(
        ...,
        alias="numberKeys",
        description="The numberKey(s) of the numbers to use with the campaign.",
    )
    number_previews: Optional[List[NumberRegistrationNumberPreview]] = Field(
        None,
        alias="numberPreviews",
        description="The number(s) to use with the campaign. This property is read-only and ignored in POST/PUT calls.",
        unique_items=True,
    )
    __properties = [
        "id",
        "referenceId",
        "name",
        "createdDate",
        "lastModifiedDate",
        "type",
        "externalCampaignId",
        "numberKeys",
        "numberPreviews",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NumberRegistrationExternalTenDlcCampaign:
        """Create an instance of NumberRegistrationExternalTenDlcCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "number_previews",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in number_previews (list)
        _items = []
        if self.number_previews:
            for _item in self.number_previews:
                if _item:
                    _items.append(_item.to_dict())
            _dict["numberPreviews"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NumberRegistrationExternalTenDlcCampaign:
        """Create an instance of NumberRegistrationExternalTenDlcCampaign from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NumberRegistrationExternalTenDlcCampaign.parse_obj(obj)

        _obj = NumberRegistrationExternalTenDlcCampaign.parse_obj(
            {
                "id": obj.get("id"),
                "reference_id": obj.get("referenceId"),
                "name": obj.get("name"),
                "created_date": obj.get("createdDate"),
                "last_modified_date": obj.get("lastModifiedDate"),
                "type": obj.get("type"),
                "external_campaign_id": obj.get("externalCampaignId"),
                "number_keys": obj.get("numberKeys"),
                "number_previews": [
                    NumberRegistrationNumberPreview.from_dict(_item)
                    for _item in obj.get("numberPreviews")
                ]
                if obj.get("numberPreviews") is not None
                else None,
            }
        )
        return _obj
