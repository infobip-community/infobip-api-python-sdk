# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr
from infobip.models.message_price import MessagePrice
from infobip.models.mms_webhook_inbound_message_segment import (
    MmsWebhookInboundMessageSegment,
)


class MmsWebhookInboundReport(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    entity_id: Optional[StrictStr] = Field(
        None,
        alias="entityId",
        description="The ID of the entity, if application and entity management is used.",
    )
    application_id: Optional[StrictStr] = Field(
        None,
        alias="applicationId",
        description="The ID of the application, if application and entity management is used.",
    )
    var_from: Optional[StrictStr] = Field(
        None, alias="from", description="Sender ID that can be alphanumeric or numeric."
    )
    to: Optional[StrictStr] = Field(
        None, description="The message destination address."
    )
    received_at: Optional[datetime] = Field(
        None,
        alias="receivedAt",
        description="Date and time when Infobip received the message.",
    )
    message_id: Optional[StrictStr] = Field(
        None,
        alias="messageId",
        description="The ID that uniquely identifies the received message.",
    )
    paired_message_id: Optional[StrictStr] = Field(
        None,
        alias="pairedMessageId",
        description="Message ID of paired outgoing message if matched by Infobip platform.",
    )
    callback_data: Optional[StrictStr] = Field(
        None,
        alias="callbackData",
        description="Callback data sent through `callbackData` field in fully featured MMS message.",
    )
    user_agent: Optional[StrictStr] = Field(
        None,
        alias="userAgent",
        description="Identifier of the device from which the message was sent.",
    )
    message: Optional[List[MmsWebhookInboundMessageSegment]] = Field(
        None, description="All parts of the received message."
    )
    price: Optional[MessagePrice] = None
    __properties = [
        "entityId",
        "applicationId",
        "from",
        "to",
        "receivedAt",
        "messageId",
        "pairedMessageId",
        "callbackData",
        "userAgent",
        "message",
        "price",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MmsWebhookInboundReport:
        """Create an instance of MmsWebhookInboundReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in message (list)
        _items = []
        if self.message:
            for _item in self.message:
                if _item:
                    _items.append(_item.to_dict())
            _dict["message"] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict["price"] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MmsWebhookInboundReport:
        """Create an instance of MmsWebhookInboundReport from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MmsWebhookInboundReport.parse_obj(obj)

        _obj = MmsWebhookInboundReport.parse_obj(
            {
                "entity_id": obj.get("entityId"),
                "application_id": obj.get("applicationId"),
                "var_from": obj.get("from"),
                "to": obj.get("to"),
                "received_at": obj.get("receivedAt"),
                "message_id": obj.get("messageId"),
                "paired_message_id": obj.get("pairedMessageId"),
                "callback_data": obj.get("callbackData"),
                "user_agent": obj.get("userAgent"),
                "message": [
                    MmsWebhookInboundMessageSegment.from_dict(_item)
                    for _item in obj.get("message")
                ]
                if obj.get("message") is not None
                else None,
                "price": MessagePrice.from_dict(obj.get("price"))
                if obj.get("price") is not None
                else None,
            }
        )
        return _obj
