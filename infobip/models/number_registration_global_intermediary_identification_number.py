# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import Field, constr, validator

from infobip.models.number_registration_business_identifier import (
    NumberRegistrationBusinessIdentifier,
)


class NumberRegistrationGlobalIntermediaryIdentificationNumber(
    NumberRegistrationBusinessIdentifier
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    id: constr(strict=True, max_length=19, min_length=19) = Field(
        ..., description="The GIIN identifier."
    )
    __properties = ["id", "type"]

    @validator("id")
    def id_validate_regular_expression(cls, v):
        if not re.match(
            r"([A-NP-Z0-9]{6})\.([A-NP-Z0-9]{5})\.(LE|SL|ME|BR|SP)\.(\d{3})", v
        ):
            raise ValueError(
                r"must validate the regular expression /([A-NP-Z0-9]{6})\.([A-NP-Z0-9]{5})\.(LE|SL|ME|BR|SP)\.(\d{3})/"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> NumberRegistrationGlobalIntermediaryIdentificationNumber:
        """Create an instance of NumberRegistrationGlobalIntermediaryIdentificationNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> NumberRegistrationGlobalIntermediaryIdentificationNumber:
        """Create an instance of NumberRegistrationGlobalIntermediaryIdentificationNumber from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NumberRegistrationGlobalIntermediaryIdentificationNumber.parse_obj(
                obj
            )

        _obj = NumberRegistrationGlobalIntermediaryIdentificationNumber.parse_obj(
            {"id": obj.get("id"), "type": obj.get("type")}
        )
        return _obj
