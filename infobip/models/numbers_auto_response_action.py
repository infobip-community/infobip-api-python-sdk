# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import Field, StrictStr, constr

from infobip.models.numbers_delivery_time_window import NumbersDeliveryTimeWindow
from infobip.models.numbers_mo_non_forward_action import NumbersMoNonForwardAction


class NumbersAutoResponseAction(NumbersMoNonForwardAction):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    message: constr(strict=True, max_length=1080, min_length=0) = Field(
        ..., description="Text that will be sent as response message."
    )
    sender: Optional[StrictStr] = Field(
        "null",
        description="If set, response message will be sent from this sender, not from MO receiver.",
    )
    delivery_time_window: Optional[NumbersDeliveryTimeWindow] = Field(
        None, alias="deliveryTimeWindow"
    )
    __properties = ["type", "editable", "message", "sender", "deliveryTimeWindow"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NumbersAutoResponseAction:
        """Create an instance of NumbersAutoResponseAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of delivery_time_window
        if self.delivery_time_window:
            _dict["deliveryTimeWindow"] = self.delivery_time_window.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NumbersAutoResponseAction:
        """Create an instance of NumbersAutoResponseAction from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NumbersAutoResponseAction.parse_obj(obj)

        _obj = NumbersAutoResponseAction.parse_obj(
            {
                "type": obj.get("type"),
                "editable": obj.get("editable"),
                "message": obj.get("message"),
                "sender": obj.get("sender")
                if obj.get("sender") is not None
                else "null",
                "delivery_time_window": NumbersDeliveryTimeWindow.from_dict(
                    obj.get("deliveryTimeWindow")
                )
                if obj.get("deliveryTimeWindow") is not None
                else None,
            }
        )
        return _obj
