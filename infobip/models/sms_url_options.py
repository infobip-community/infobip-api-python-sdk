# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr


class SmsUrlOptions(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    shorten_url: Optional[StrictBool] = Field(
        True,
        alias="shortenUrl",
        description="Enable shortening of the URLs within a message. Set this to `true`, if you want to set up other URL options.",
    )
    track_clicks: Optional[StrictBool] = Field(
        True,
        alias="trackClicks",
        description="Enable tracking of short URL clicks within a message: which URL was clicked, how many times, and by whom.",
    )
    tracking_url: Optional[StrictStr] = Field(
        None,
        alias="trackingUrl",
        description="The URL of your callback server on to which the Click report will be sent.",
    )
    remove_protocol: Optional[StrictBool] = Field(
        False,
        alias="removeProtocol",
        description="Remove a protocol, such as `https://`, from links to shorten a message. Note that some mobiles may not recognize such links as a URL.",
    )
    custom_domain: Optional[StrictStr] = Field(
        None,
        alias="customDomain",
        description="Select a predefined custom domain to use when generating a short URL.",
    )
    __properties = [
        "shortenUrl",
        "trackClicks",
        "trackingUrl",
        "removeProtocol",
        "customDomain",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmsUrlOptions:
        """Create an instance of SmsUrlOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmsUrlOptions:
        """Create an instance of SmsUrlOptions from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SmsUrlOptions.parse_obj(obj)

        _obj = SmsUrlOptions.parse_obj(
            {
                "shorten_url": obj.get("shortenUrl")
                if obj.get("shortenUrl") is not None
                else True,
                "track_clicks": obj.get("trackClicks")
                if obj.get("trackClicks") is not None
                else True,
                "tracking_url": obj.get("trackingUrl"),
                "remove_protocol": obj.get("removeProtocol")
                if obj.get("removeProtocol") is not None
                else False,
                "custom_domain": obj.get("customDomain"),
            }
        )
        return _obj
