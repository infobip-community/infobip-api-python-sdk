# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, StrictBool, StrictStr, conlist, constr, validator
from infobip.models.number_registration_brand_preview import (
    NumberRegistrationBrandPreview,
)
from infobip.models.number_registration_campaign import (
    NumberRegistrationCampaign,
)
from infobip.models.number_registration_document_metadata import (
    NumberRegistrationDocumentMetadata,
)
from infobip.models.number_registration_number_preview import (
    NumberRegistrationNumberPreview,
)
from infobip.models.number_registration_opt_ins import NumberRegistrationOptIns


class NumberRegistrationTenDlcCampaign(NumberRegistrationCampaign):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    brand_id: StrictStr = Field(
        ...,
        alias="brandId",
        description="The ID of the brand to use with the campaign.",
    )
    program_summary: constr(strict=True, max_length=255, min_length=40) = Field(
        ...,
        alias="programSummary",
        description="A brief description of the purpose of the campaign.",
    )
    customer_care_email: constr(strict=True, max_length=255, min_length=1) = Field(
        ...,
        alias="customerCareEmail",
        description="The email address the user may contact to get customer care.  Must be a well formed email address that does not include a '=' character.",
    )
    confirmation_message: constr(strict=True, max_length=255, min_length=20) = Field(
        ...,
        alias="confirmationMessage",
        description="The message sent to the user after they have subscribed.",
    )
    example_messages: conlist(StrictStr, max_items=5, min_items=1) = Field(
        ...,
        alias="exampleMessages",
        description="The example message(s) a user may receive from this campaign. Each example message must be at least 20 characters long.",
    )
    help_message: constr(strict=True, max_length=255, min_length=20) = Field(
        ...,
        alias="helpMessage",
        description="The message sent to a user after they have asked for help.",
    )
    stop_message: constr(strict=True, max_length=255, min_length=20) = Field(
        ...,
        alias="stopMessage",
        description="The message sent to a user after they have asked to stop receiving messages.",
    )
    message_types: List[StrictStr] = Field(
        ...,
        alias="messageTypes",
        description="The message type(s) this campaign will use to send messages.",
        unique_items=True,
    )
    terms_and_conditions_url: constr(
        strict=True, max_length=255, min_length=11
    ) = Field(
        ...,
        alias="termsAndConditionsUrl",
        description="URL where the terms and conditions of the campaign are located.",
    )
    terms_and_conditions_document_id: Optional[StrictStr] = Field(
        None, alias="termsAndConditionsDocumentId"
    )
    terms_and_conditions_document_preview: Optional[
        NumberRegistrationDocumentMetadata
    ] = Field(None, alias="termsAndConditionsDocumentPreview")
    opt_ins: NumberRegistrationOptIns = Field(..., alias="optIns")
    brand_preview: Optional[NumberRegistrationBrandPreview] = Field(
        None, alias="brandPreview"
    )
    customer_care_phone: constr(strict=True, max_length=16, min_length=3) = Field(
        ...,
        alias="customerCarePhone",
        description="The phone number the user may call to get customer care.",
    )
    low_volume: StrictBool = Field(
        ...,
        alias="lowVolume",
        description="Low volume campaigns are a lower cost campaign designed for low daily volume and non-time-sensitive messages. They are limited to 6 messages per minute on most carriers and no more than 5,000 messages per month on all carriers.",
    )
    use_case: StrictStr = Field(
        ..., alias="useCase", description="The use case for this campaign."
    )
    number_keys: conlist(StrictStr, max_items=50, min_items=1) = Field(
        ...,
        alias="numberKeys",
        description="The numberKey(s) of the numbers to use with the campaign.",
    )
    number_previews: Optional[List[NumberRegistrationNumberPreview]] = Field(
        None,
        alias="numberPreviews",
        description="The number(s) to use with the campaign. This property is read-only and ignored in POST/PUT calls.",
        unique_items=True,
    )
    __properties = [
        "id",
        "referenceId",
        "name",
        "createdDate",
        "lastModifiedDate",
        "type",
        "brandId",
        "programSummary",
        "customerCareEmail",
        "confirmationMessage",
        "exampleMessages",
        "helpMessage",
        "stopMessage",
        "messageTypes",
        "termsAndConditionsUrl",
        "termsAndConditionsDocumentId",
        "termsAndConditionsDocumentPreview",
        "optIns",
        "brandPreview",
        "customerCarePhone",
        "lowVolume",
        "useCase",
        "numberKeys",
        "numberPreviews",
    ]

    @validator("message_types")
    def message_types_validate_enum(cls, v):
        if v is None:
            return
        for enum_value in v:
            if enum_value not in ("SMS", "MMS", "sms", "mms"):
                raise ValueError("must validate the enum values ('SMS', 'MMS')")
        return v

    @validator("customer_care_phone")
    def customer_care_phone_validate_regular_expression(cls, v):
        if not re.match(r"\+?[1-9]\d{1,14}", v):
            raise ValueError(r"must validate the regular expression /\+?[1-9]\d{1,14}/")
        return v

    @validator("use_case")
    def use_case_validate_enum(cls, v):
        if v not in (
            "ALERTS",
            "CHAT",
            "DONATION",
            "EDUCATION",
            "FRAUD_ALERTS",
            "PROMOTIONAL_MARKETING",
            "PUBLIC_SERVICE_ANNOUNCEMENT",
            "SWEEPSTAKES_CONTEST",
            "TWO_FACTOR_AUTH",
            "VOTING_POLLING",
        ):
            raise ValueError(
                "must validate the enum values ('ALERTS', 'CHAT', 'DONATION', 'EDUCATION', 'FRAUD_ALERTS', 'PROMOTIONAL_MARKETING', 'PUBLIC_SERVICE_ANNOUNCEMENT', 'SWEEPSTAKES_CONTEST', 'TWO_FACTOR_AUTH', 'VOTING_POLLING')"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NumberRegistrationTenDlcCampaign:
        """Create an instance of NumberRegistrationTenDlcCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "number_previews",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of terms_and_conditions_document_preview
        if self.terms_and_conditions_document_preview:
            _dict[
                "termsAndConditionsDocumentPreview"
            ] = self.terms_and_conditions_document_preview.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opt_ins
        if self.opt_ins:
            _dict["optIns"] = self.opt_ins.to_dict()
        # override the default output from pydantic by calling `to_dict()` of brand_preview
        if self.brand_preview:
            _dict["brandPreview"] = self.brand_preview.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in number_previews (list)
        _items = []
        if self.number_previews:
            for _item in self.number_previews:
                if _item:
                    _items.append(_item.to_dict())
            _dict["numberPreviews"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NumberRegistrationTenDlcCampaign:
        """Create an instance of NumberRegistrationTenDlcCampaign from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NumberRegistrationTenDlcCampaign.parse_obj(obj)

        _obj = NumberRegistrationTenDlcCampaign.parse_obj(
            {
                "id": obj.get("id"),
                "reference_id": obj.get("referenceId"),
                "name": obj.get("name"),
                "created_date": obj.get("createdDate"),
                "last_modified_date": obj.get("lastModifiedDate"),
                "type": obj.get("type"),
                "brand_id": obj.get("brandId"),
                "program_summary": obj.get("programSummary"),
                "customer_care_email": obj.get("customerCareEmail"),
                "confirmation_message": obj.get("confirmationMessage"),
                "example_messages": obj.get("exampleMessages"),
                "help_message": obj.get("helpMessage"),
                "stop_message": obj.get("stopMessage"),
                "message_types": obj.get("messageTypes"),
                "terms_and_conditions_url": obj.get("termsAndConditionsUrl"),
                "terms_and_conditions_document_id": obj.get(
                    "termsAndConditionsDocumentId"
                ),
                "terms_and_conditions_document_preview": NumberRegistrationDocumentMetadata.from_dict(
                    obj.get("termsAndConditionsDocumentPreview")
                )
                if obj.get("termsAndConditionsDocumentPreview") is not None
                else None,
                "opt_ins": NumberRegistrationOptIns.from_dict(obj.get("optIns"))
                if obj.get("optIns") is not None
                else None,
                "brand_preview": NumberRegistrationBrandPreview.from_dict(
                    obj.get("brandPreview")
                )
                if obj.get("brandPreview") is not None
                else None,
                "customer_care_phone": obj.get("customerCarePhone"),
                "low_volume": obj.get("lowVolume")
                if obj.get("lowVolume") is not None
                else False,
                "use_case": obj.get("useCase"),
                "number_keys": obj.get("numberKeys"),
                "number_previews": [
                    NumberRegistrationNumberPreview.from_dict(_item)
                    for _item in obj.get("numberPreviews")
                ]
                if obj.get("numberPreviews") is not None
                else None,
            }
        )
        return _obj
