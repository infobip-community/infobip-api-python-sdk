# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from infobip.models.sms_language_configuration import SmsLanguageConfiguration


class SmsPreview(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    text_preview: Optional[StrictStr] = Field(
        None,
        alias="textPreview",
        description="Preview of the message content as it should appear on the recipientâ€™s device.",
    )
    message_count: Optional[StrictInt] = Field(
        None,
        alias="messageCount",
        description="Number of SMS message parts required to deliver the message.",
    )
    characters_remaining: Optional[StrictInt] = Field(
        None,
        alias="charactersRemaining",
        description="Number of remaining characters in the last part of the SMS.",
    )
    configuration: Optional[SmsLanguageConfiguration] = None
    __properties = [
        "textPreview",
        "messageCount",
        "charactersRemaining",
        "configuration",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmsPreview:
        """Create an instance of SmsPreview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict["configuration"] = self.configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmsPreview:
        """Create an instance of SmsPreview from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SmsPreview.parse_obj(obj)

        _obj = SmsPreview.parse_obj(
            {
                "text_preview": obj.get("textPreview"),
                "message_count": obj.get("messageCount"),
                "characters_remaining": obj.get("charactersRemaining"),
                "configuration": SmsLanguageConfiguration.from_dict(
                    obj.get("configuration")
                )
                if obj.get("configuration") is not None
                else None,
            }
        )
        return _obj
