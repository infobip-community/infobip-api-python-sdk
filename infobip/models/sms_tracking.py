# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr


class SmsTracking(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    base_url: Optional[StrictStr] = Field(
        None,
        alias="baseUrl",
        description="Custom base URL for shortened links in messages when tracking URL conversions. Legacy - use `urlOptions` instead.",
    )
    process_key: Optional[StrictStr] = Field(
        None,
        alias="processKey",
        description="The process key which uniquely identifies conversion tracking.",
    )
    track: Optional[StrictStr] = Field(
        None,
        description="Indicates if a message has to be tracked for conversion rates. Values are: `SMS` and `URL`. `URL` is a legacy value. Use `urlOptions` instead. For more details on SMS Conversion, see: [Track Conversion](https://www.infobip.com/docs/sms/api#track-conversion).",
    )
    type: Optional[StrictStr] = Field(
        None,
        description="Sets a custom conversion type naming convention, e.g. `ONE_TIME_PIN` or `SOCIAL_INVITES`.",
    )
    __properties = ["baseUrl", "processKey", "track", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmsTracking:
        """Create an instance of SmsTracking from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmsTracking:
        """Create an instance of SmsTracking from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SmsTracking.parse_obj(obj)

        _obj = SmsTracking.parse_obj(
            {
                "base_url": obj.get("baseUrl"),
                "process_key": obj.get("processKey"),
                "track": obj.get("track"),
                "type": obj.get("type"),
            }
        )
        return _obj
