# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr

from infobip.models.message_price import MessagePrice


class SmsWebhookInboundReport(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    message_id: Optional[StrictStr] = Field(
        None, alias="messageId", description="Unique SMS ID."
    )
    var_from: Optional[StrictStr] = Field(
        None, alias="from", description="Sender ID that can be alphanumeric or numeric."
    )
    to: Optional[StrictStr] = Field(None, description="The recipient number.")
    text: Optional[StrictStr] = Field(None, description="Received message content.")
    clean_text: Optional[StrictStr] = Field(
        None,
        alias="cleanText",
        description="Text of received message without a keyword (if a keyword was sent).",
    )
    keyword: Optional[StrictStr] = Field(
        None, description="Keyword extracted from the message text."
    )
    received_at: Optional[datetime] = Field(
        None,
        alias="receivedAt",
        description="Date and time when Infobip received the message.",
    )
    sms_count: Optional[StrictInt] = Field(
        None,
        alias="smsCount",
        description="Long SMS messages have a character limit on how much can be sent over one message.  Longer messages will be split up into multiple messages and sent separately.  This is the total count of messages one SMS was sent over.",
    )
    price: Optional[MessagePrice] = None
    callback_data: Optional[StrictStr] = Field(
        None,
        alias="callbackData",
        description="The callback data sent through the callbackData field in your fully featured SMS message.",
    )
    __properties = [
        "messageId",
        "from",
        "to",
        "text",
        "cleanText",
        "keyword",
        "receivedAt",
        "smsCount",
        "price",
        "callbackData",
    ]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmsWebhookInboundReport:
        """Create an instance of SmsWebhookInboundReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict["price"] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmsWebhookInboundReport:
        """Create an instance of SmsWebhookInboundReport from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SmsWebhookInboundReport.parse_obj(obj)

        _obj = SmsWebhookInboundReport.parse_obj(
            {
                "message_id": obj.get("messageId"),
                "var_from": obj.get("from"),
                "to": obj.get("to"),
                "text": obj.get("text"),
                "clean_text": obj.get("cleanText"),
                "keyword": obj.get("keyword"),
                "received_at": obj.get("receivedAt"),
                "sms_count": obj.get("smsCount"),
                "price": MessagePrice.from_dict(obj.get("price"))
                if obj.get("price") is not None
                else None,
                "callback_data": obj.get("callbackData"),
            }
        )
        return _obj
