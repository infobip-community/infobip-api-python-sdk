# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List, Optional

from pydantic import BaseModel, Field

from infobip.models.sms_webhook_outbound_report import SmsWebhookOutboundReport


class SmsWebhookOutboundReportResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    results: Optional[List[SmsWebhookOutboundReport]] = Field(
        None, description="The array of objects for your sent messages."
    )
    __properties = ["results"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmsWebhookOutboundReportResponse:
        """Create an instance of SmsWebhookOutboundReportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict["results"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmsWebhookOutboundReportResponse:
        """Create an instance of SmsWebhookOutboundReportResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SmsWebhookOutboundReportResponse.parse_obj(obj)

        _obj = SmsWebhookOutboundReportResponse.parse_obj(
            {
                "results": [
                    SmsWebhookOutboundReport.from_dict(_item)
                    for _item in obj.get("results")
                ]
                if obj.get("results") is not None
                else None
            }
        )
        return _obj
