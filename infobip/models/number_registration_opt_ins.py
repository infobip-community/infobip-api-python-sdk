# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field

from infobip.models.number_registration_interactive_voice_response_opt_in import (
    NumberRegistrationInteractiveVoiceResponseOptIn,
)
from infobip.models.number_registration_keyword_opt_in import (
    NumberRegistrationKeywordOptIn,
)
from infobip.models.number_registration_verbal_opt_in import (
    NumberRegistrationVerbalOptIn,
)
from infobip.models.number_registration_web_opt_in import NumberRegistrationWebOptIn


class NumberRegistrationOptIns(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    keyword: Optional[NumberRegistrationKeywordOptIn] = None
    web: Optional[NumberRegistrationWebOptIn] = None
    verbal: Optional[NumberRegistrationVerbalOptIn] = None
    interactive_voice_response: Optional[
        NumberRegistrationInteractiveVoiceResponseOptIn
    ] = Field(None, alias="interactiveVoiceResponse")
    __properties = ["keyword", "web", "verbal", "interactiveVoiceResponse"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NumberRegistrationOptIns:
        """Create an instance of NumberRegistrationOptIns from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of keyword
        if self.keyword:
            _dict["keyword"] = self.keyword.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web
        if self.web:
            _dict["web"] = self.web.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verbal
        if self.verbal:
            _dict["verbal"] = self.verbal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interactive_voice_response
        if self.interactive_voice_response:
            _dict[
                "interactiveVoiceResponse"
            ] = self.interactive_voice_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NumberRegistrationOptIns:
        """Create an instance of NumberRegistrationOptIns from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NumberRegistrationOptIns.parse_obj(obj)

        _obj = NumberRegistrationOptIns.parse_obj(
            {
                "keyword": NumberRegistrationKeywordOptIn.from_dict(obj.get("keyword"))
                if obj.get("keyword") is not None
                else None,
                "web": NumberRegistrationWebOptIn.from_dict(obj.get("web"))
                if obj.get("web") is not None
                else None,
                "verbal": NumberRegistrationVerbalOptIn.from_dict(obj.get("verbal"))
                if obj.get("verbal") is not None
                else None,
                "interactive_voice_response": NumberRegistrationInteractiveVoiceResponseOptIn.from_dict(
                    obj.get("interactiveVoiceResponse")
                )
                if obj.get("interactiveVoiceResponse") is not None
                else None,
            }
        )
        return _obj
