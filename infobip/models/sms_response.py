# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List, Optional

from pydantic import BaseModel, Field, StrictStr

from infobip.models.sms_response_details import SmsResponseDetails


class SendSMSResponseBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    bulk_id: Optional[StrictStr] = Field(
        None,
        alias="bulkId",
        description="Unique ID assigned to the request if messaging multiple recipients or sending multiple messages via a single API request. Typically, used to fetch [delivery reports](#channels/sms/get-outbound-sms-message-delivery-reports) and [message logs](#channels/sms/get-outbound-sms-message-logs).",
    )
    messages: Optional[List[SmsResponseDetails]] = Field(
        None,
        description="An array of message objects of a single message or multiple messages sent under one bulk ID.",
    )
    __properties = ["bulkId", "messages"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SendSMSResponseBody:
        """Create an instance of SmsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict["messages"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SendSMSResponseBody:
        """Create an instance of SmsResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SendSMSResponseBody.parse_obj(obj)

        _obj = SendSMSResponseBody.parse_obj(
            {
                "bulk_id": obj.get("bulkId"),
                "messages": [
                    SmsResponseDetails.from_dict(_item) for _item in obj.get("messages")
                ]
                if obj.get("messages") is not None
                else None,
            }
        )
        return _obj
