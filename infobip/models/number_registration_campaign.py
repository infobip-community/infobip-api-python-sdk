# coding: utf-8

"""
    This class is auto generated from the Infobip OpenAPI specification
    through the OpenAPI Specification Client API libraries (Re)Generator (OSCAR),
    powered by the OpenAPI Generator (https://openapi-generator.tech).
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from infobip import models

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator


class NumberRegistrationCampaign(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    id: Optional[StrictStr] = Field(
        None, description="The identifier for the campaign."
    )
    reference_id: Optional[StrictStr] = Field(
        None,
        alias="referenceId",
        description="Unique user defined ID for the campaign. While not required, it is recommended to supply a referenceId as the uniqueness constraint will help ensure a campaign is not accidentally created multiple times. Subsequent create requests with the same referenceId will be rejected with an error.",
    )
    name: constr(strict=True, max_length=30, min_length=1) = Field(
        ..., description="The name of the campaign."
    )
    created_date: Optional[datetime] = Field(
        None,
        alias="createdDate",
        description="The date and time when the campaign was created.",
    )
    last_modified_date: Optional[datetime] = Field(
        None,
        alias="lastModifiedDate",
        description="The date and time when the campaign was last modified.",
    )
    type: Optional[StrictStr] = None
    __properties = [
        "id",
        "referenceId",
        "name",
        "createdDate",
        "lastModifiedDate",
        "type",
    ]

    @validator("name")
    def name_validate_regular_expression(cls, v):
        if not re.match(r"[A-Za-z0-9_ ]*", v):
            raise ValueError(r"must validate the regular expression /[A-Za-z0-9_ ]*/")
        return v

    @validator("type")
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in (
            "TEN_DIGIT_LONG_CODE",
            "EXTERNAL_TEN_DIGIT_LONG_CODE",
            "SHORT_CODE",
        ):
            raise ValueError(
                "must validate the enum values ('TEN_DIGIT_LONG_CODE', 'EXTERNAL_TEN_DIGIT_LONG_CODE', 'SHORT_CODE')"
            )
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = "type"

    # discriminator mappings
    __discriminator_value_class_map = {
        "EXTERNAL_TEN_DIGIT_LONG_CODE": "NumberRegistrationExternalTenDlcCampaign",
        "NumberRegistrationExternalTenDlcCampaign": "NumberRegistrationExternalTenDlcCampaign",
        "NumberRegistrationTenDlcCampaign": "NumberRegistrationTenDlcCampaign",
        "TEN_DIGIT_LONG_CODE": "NumberRegistrationTenDlcCampaign",
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> Union(
        NumberRegistrationExternalTenDlcCampaign, NumberRegistrationTenDlcCampaign
    ):
        """Create an instance of NumberRegistrationCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> Union(
        NumberRegistrationExternalTenDlcCampaign, NumberRegistrationTenDlcCampaign
    ):
        """Create an instance of NumberRegistrationCampaign from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = getattr(models, object_type)
            return klass.from_dict(obj)
        else:
            raise ValueError(
                "NumberRegistrationCampaign failed to lookup discriminator value from "
                + json.dumps(obj)
                + ". Discriminator property name: "
                + cls.__discriminator_property_name
                + ", mapping: "
                + json.dumps(cls.__discriminator_value_class_map)
            )
